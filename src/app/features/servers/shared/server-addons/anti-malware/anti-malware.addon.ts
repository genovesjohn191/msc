import {
  Component,
  Output,
  EventEmitter,
  OnInit,
  OnDestroy,
  ChangeDetectorRef,
  ChangeDetectionStrategy,
  ViewEncapsulation
} from '@angular/core';
import { Subscription } from 'rxjs';
import { McsTextContentProvider } from '@app/core';
import {
  unsubscribeSafely,
  isNullOrEmpty
} from '@app/utilities';
import { ServerAntiMalware } from './server-anti-malware';
import { OptionsApiService } from '../../../../services';

@Component({
  selector: 'mcs-anti-malware-addon',
  templateUrl: './anti-malware.addon.html',
  encapsulation: ViewEncapsulation.None,
  changeDetection: ChangeDetectionStrategy.OnPush,
  host: {
    'class': 'anti-malware-wrapper'
  }
})

export class AntiMalwareAddOnComponent implements OnInit, OnDestroy {
  public textContent: any;
  public antiMalwareServices: string[];
  public antiMalware: ServerAntiMalware;

  @Output()
  public change: EventEmitter<ServerAntiMalware> = new EventEmitter();

  private _antiMalwareService: string;
  public get antiMalwareService(): string {
    return this._antiMalwareService;
  }
  public set antiMalwareService(value: string) {
    this._antiMalwareService = value;
    this._changeDetectorRef.markForCheck();
  }

  private _antiMalwareSubscription: Subscription;

  public constructor(
    private _textProvider: McsTextContentProvider,
    private _changeDetectorRef: ChangeDetectorRef,
    private _optionsApiService: OptionsApiService
  ) {
    this.antiMalwareServices = new Array();
    this.antiMalware = new ServerAntiMalware();
  }

  public ngOnInit(): void {
    this.textContent = this._textProvider.content.servers.shared.antiMalwareAddOn;
    this._getAntiMalwareVariants();
  }

  public ngOnDestroy(): void {
    unsubscribeSafely(this._antiMalwareSubscription);
  }

  /**
   * This will set the anti-malware service value
   * and notify change parameter
   */
  public onServiceChanged(): void {
    this._notifyChangeParameter();
  }

  /**
   * Get anti-malware options from the API
   */
  private _getAntiMalwareVariants(): void {
    this._antiMalwareSubscription = this._optionsApiService.getAntiMalwareServiceOptions()
      .subscribe((response) => {
        if (isNullOrEmpty(response)) { return; }
        this.antiMalwareServices = response.content;

        if (!isNullOrEmpty(this.antiMalwareServices)) {
          this.antiMalwareService = this.antiMalwareServices[0];
        }
      });
  }

  /**
   * Event that emits whenever there are changes in the model
   */
  private _notifyChangeParameter(): void {
    this.antiMalware.serviceType = this.antiMalwareService;
    this.change.emit(this.antiMalware);
  }
}
