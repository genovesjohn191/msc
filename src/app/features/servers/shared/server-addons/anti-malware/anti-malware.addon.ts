import {
  Component,
  Output,
  EventEmitter,
  OnInit,
  OnDestroy,
  ChangeDetectorRef,
  ChangeDetectionStrategy,
  ViewEncapsulation
} from '@angular/core';
import { Subscription } from 'rxjs/Rx';
import {
  ServerAntiMalware,
  ServerAntiMalwareServiceType
} from '../../../models';
import {
  McsTextContentProvider,
  McsOption
} from '../../../../../core';
import {
  unsubscribeSafely,
  isNullOrEmpty
} from '../../../../../utilities';
import { OptionsApiService } from '../../../../services';

@Component({
  selector: 'mcs-anti-malware',
  templateUrl: './anti-malware.addon.html',
  encapsulation: ViewEncapsulation.None,
  changeDetection: ChangeDetectionStrategy.OnPush,
  host: {
    'class': 'anti-malware-wrapper'
  }
})

export class AntiMalwareAddOnComponent implements OnInit, OnDestroy {
  public textContent: any;
  public services: McsOption[];
  public subscription: Subscription;

  @Output()
  public change: EventEmitter<ServerAntiMalware> = new EventEmitter();

  private _antiMalwareService: ServerAntiMalwareServiceType;
  public get antiMalwareService(): ServerAntiMalwareServiceType {
    return this._antiMalwareService;
  }
  public set antiMalwareService(value: ServerAntiMalwareServiceType) {
    this._antiMalwareService = value;
    this._changeDetectorRef.markForCheck();
  }

  public constructor(
    private _textProvider: McsTextContentProvider,
    private _changeDetectorRef: ChangeDetectorRef,
    private _optionsApiService: OptionsApiService
  ) {
    this.services = new Array<McsOption>();
  }

  public ngOnInit(): void {
    this.textContent = this._textProvider.content.servers.shared.antiMalwareAddOn;
    this._getAntiMalwareVariants();
  }

  public ngOnDestroy(): void {
    unsubscribeSafely(this.subscription);
  }

  /**
   * This will set the anti-malware service value
   * and notify change parameter
   * @param value Server anti-malware service
   */
  public onServiceChanged(value: ServerAntiMalwareServiceType): void {
    this.antiMalwareService = value;
    this._notifyChangeParameter();
  }

  /**
   * Get anti-malware options from the API
   */
  private _getAntiMalwareVariants(): void {
    this.subscription = this._optionsApiService.getAntiMalwareServiceOptions()
      .subscribe((response) => {
        if (isNullOrEmpty(response)) { return; }

        this._setAntiMalwareServices(response.content);
        this._setServiceInitialValue();
      });
  }

  /** Set anti-malware services */
  private _setAntiMalwareServices(options: string[]): void {
    if (isNullOrEmpty(options)) { return; }

    options.forEach((option) => {
      this.services.push(new McsOption(option, option));
    });
  }

  /** Set anti-malware service initial value */
  private _setServiceInitialValue(): void {
    if (isNullOrEmpty(this.services)) { return; }

    this.antiMalwareService = this.services[0].value;
  }

  /**
   * Event that emits whenever there are changes in the model
   */
  private _notifyChangeParameter(): void {
    let serverAntiMalware = new ServerAntiMalware();
    serverAntiMalware.serviceType = this.antiMalwareService;
    this.change.emit(serverAntiMalware);
  }
}
