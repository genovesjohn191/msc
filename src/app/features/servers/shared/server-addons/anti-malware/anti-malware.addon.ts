import {
  Component,
  Output,
  EventEmitter,
  OnInit,
  ChangeDetectionStrategy,
  ViewEncapsulation
} from '@angular/core';
import {
  Observable,
  of,
  Subject
} from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import {
  FormGroup,
  FormControl
} from '@angular/forms';
import { McsTextContentProvider } from '@app/core';
import { McsServerCreateAddOnAntiVirus } from '@app/models';
import { McsDataChange } from '@app/utilities';

@Component({
  selector: 'mcs-anti-malware-addon',
  templateUrl: './anti-malware.addon.html',
  encapsulation: ViewEncapsulation.None,
  changeDetection: ChangeDetectionStrategy.OnPush,
  host: {
    'class': 'anti-malware-wrapper'
  }
})

export class AntiMalwareAddOnComponent implements
  OnInit, McsDataChange<McsServerCreateAddOnAntiVirus> {

  public textContent: any;
  public variantOptions$: Observable<string[]>;
  public fgAntiMalware: FormGroup;
  public fcAntiMalware: FormControl;

  @Output()
  public dataChange = new EventEmitter<McsServerCreateAddOnAntiVirus>();
  private _destroySubject = new Subject<void>();

  public constructor(private _textProvider: McsTextContentProvider) { }

  public ngOnInit(): void {
    this.textContent = this._textProvider.content.servers.shared.antiMalwareAddOn;
    this._subscribeToVariants();
    this._registerFormGroup();
  }

  /**
   * Event that emits whenever there are changes in the data
   */
  public notifyDataChange(): void {
    // TODO: As of now since we only have 1 technology which is the
    // Trend Micro, we need to set it manually first in order for the anti virus to work
    this.dataChange.emit({
      technology: 'Trend Micro',
      variant: this.fcAntiMalware.value
    });
  }

  private _subscribeToVariants(): void {
    // TODO: Need to use the order/items/types here to get all the
    // options avaible in the variant
    this.variantOptions$ = of(['Standard', 'Self-Managed']);
  }

  /**
   * Registers all form group on the anti malware
   */
  private _registerFormGroup(): void {
    // Register Form Groups using binding
    this.fcAntiMalware = new FormControl('');

    this.fgAntiMalware = new FormGroup({
      fcAntiMalware: this.fcAntiMalware
    });
    this.fgAntiMalware.valueChanges.pipe(
      takeUntil(this._destroySubject)
    ).subscribe(this.notifyDataChange.bind(this));
  }
}
