import {
  Component,
  Output,
  EventEmitter,
  OnInit,
  OnDestroy,
  ChangeDetectorRef,
  ChangeDetectionStrategy,
  ViewEncapsulation
} from '@angular/core';
import {
  FormGroup,
  FormControl
} from '@angular/forms';
import { Subscription } from 'rxjs/Rx';
import { ServerAntiMalwareServiceType } from '../../../models';
import {
  McsTextContentProvider,
  CoreValidators,
  McsOption
} from '../../../../../core';
import {
  unsubscribeSafely,
  isNullOrEmpty
} from '../../../../../utilities';
import { OptionsApiService } from '../../../../services';

@Component({
  selector: 'mcs-anti-malware',
  templateUrl: './anti-malware.addon.html',
  encapsulation: ViewEncapsulation.None,
  changeDetection: ChangeDetectionStrategy.OnPush,
  host: {
    'class': 'anti-malware-wrapper'
  }
})

export class AntiMalwareAddOnComponent implements OnInit, OnDestroy {
  public textContent: any;
  public services: McsOption[];

  // Form groups and controls
  public fgAntiMalware: FormGroup;
  public fcAntiMalwareServiceVariant: FormControl;
  public fcSubscription: Subscription;

  @Output()
  public change: EventEmitter<ServerAntiMalwareServiceType> = new EventEmitter();

  public constructor(
    private _textProvider: McsTextContentProvider,
    private _changeDetectorRef: ChangeDetectorRef,
    private _optionsApiService: OptionsApiService
  ) {
    this.services = new Array<McsOption>();
  }

  public ngOnInit(): void {
    this.textContent = this._textProvider.content.servers.shared.antiMalwareAddOn;
    this._registerFormGroup();
    this._getAntiMalwareVariants();
  }

  public ngOnDestroy(): void {
    unsubscribeSafely(this.fcSubscription);
  }

  /**
   * Event that emits when there is change in service selection
   * @param value Selected value to be pass on the emitter
   */
  public onChange(value: ServerAntiMalwareServiceType): void {
    this.change.emit(value);
    this._changeDetectorRef.markForCheck();
  }

  /**
   * Register form group elements for custom type
   */
  private _registerFormGroup(): void {
    // Create custom storage control and register the listener
    this.fcAntiMalwareServiceVariant = new FormControl('', [CoreValidators.required]);
    this.fcSubscription = this.fcAntiMalwareServiceVariant.valueChanges
      .subscribe(this.onChange.bind(this));

    // Bind the form control to the main form
    this.fgAntiMalware = new FormGroup({
      fcAntiMalwareServiceVariant: this.fcAntiMalwareServiceVariant
    });
  }

  /**
   * Get anti-malware options from the API
   */
  private _getAntiMalwareVariants(): void {
    this._optionsApiService.getAntiMalwareServiceOptions()
      .subscribe((response) => {
        if (isNullOrEmpty(response)) { return; }

        this._setAntiMalwareVariants(response.content);
      });
  }

  /** Set anti-malware variants */
  private _setAntiMalwareVariants(options: string[]): void {
    if (isNullOrEmpty(options)) { return; }

    options.forEach((option) => {
      this.services.push(new McsOption(option, option));
    });
  }
}
