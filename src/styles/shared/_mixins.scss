// Responsive Breakpoints
// Usage:
// .page-wrap {
//   width: 75%;
//   @include breakpoint(large) { width: 60%; }
//   @include breakpoint(medium) { width: 80%; }
//   @include breakpoint(small) { width: 95%; }
//   @include breakpoint(xsmall) { width: 100%; }
// }
@mixin breakpoint($point) {
  @if $point == wide {
    @media screen and (min-width: $wide-platform-min-width) { @content; }
  }
  @else if $point == large {
    @media screen and (max-width: $large-platform-width) { @content; }
  }
  @else if $point == medium {
    @media screen and (max-width: $medium-platform-width) { @content; }
  }
  @else if $point == small {
    @media screen and (max-width: $small-platform-width) { @content; }
  }
  @else if $point == xsmall {
    @media screen and (max-width: $xsmall-platform-width) { @content; }
  }
  @else {
    @media screen and (max-width: $point) { @content; }
  }
}

// Responsive Print
// Usage:
// .page-wrap {
//   width: 75%;
//   @include print() { width: 100%; }
// }
@mixin print() {
  @media print { @content; }
}

// Clearfix
// Usage:
// .article {
//     @include clearfix();
// }
@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Retina Images
// Usage:
// div.logo {
//   background: url("logo.png") no-repeat;
//   @include image-2x("logo2x.png", 100px, 25px);
// }
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

// Font Size Setter
// Usage:
// div {
//   @include font-size(10, 10);
// }
@mixin font-size($sizeValue: 16, $lineHeightValue: $sizeValue * 1.5) {
  font-size: $sizeValue + px;
  line-height: $lineHeightValue + px;
  font-size: ($sizeValue / 16) + rem;
  line-height: ($lineHeightValue / 16) + rem;
}

// Box Sizing
// Usage:
// *,
// *:after,
// *:before {
//   @include box-sizing(border-box);
// }
@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model;
     -moz-box-sizing: $box-model;
          box-sizing: $box-model;
}

// Border Radius
// Usage:
// .button {
//   @include border-radius(5px);
// }
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
        background-clip: padding-box;
}

@mixin border-top-right-radius($radius) {
  -webkit-border-top-right-radius: $radius;
     -moz-border-top-right-radius: $radius;
      -ms-border-top-right-radius: $radius;
          border-top-right-radius: $radius;
                  background-clip: padding-box;
}


@mixin border-top-left-radius($radius) {
  -webkit-border-top-left-radius: $radius;
     -moz-border-top-left-radius: $radius;
      -ms-border-top-left-radius: $radius;
          border-top-left-radius: $radius;
                 background-clip: padding-box;
}

@mixin border-bottom-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
     -moz-border-bottom-right-radius: $radius;
      -ms-border-bottom-right-radius: $radius;
          border-bottom-right-radius: $radius;
                     background-clip: padding-box;
}

@mixin border-bottom-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
     -moz-border-bottom-left-radius: $radius;
      -ms-border-bottom-left-radius: $radius;
          border-bottom-left-radius: $radius;
                    background-clip: padding-box;
}

// Opacity
// Usage:
// .article-heading {
//   @include opacity(0.8);
// }
@mixin opacity($opacity) {
  $opacity-ie: $opacity * 100;
      opacity: $opacity;
       filter: alpha(opacity=$opacity-ie); //IE8
}

// Center-align a block element
// Note: width must be specified for this to work.
// Usage:
// .footer-wrap {
//   width: 450px;
//   @include center-block;
// }
@mixin center-block {
  margin-right: auto;
   margin-left: auto;
       display: block;
}

// Text Overflow
// Usage:
// .text-truncate {
//   @include text-truncate;
// }
@mixin text-truncate {
  text-overflow: ellipsis;
    white-space: nowrap;
       overflow: hidden;
}

// Rotate
// Usage:
// .label {
//   @include rotate(7);
// }
@mixin rotate($value) {
  -webkit-transform: rotate($value + deg);
     -moz-transform: rotate($value + deg);
      -ms-transform: rotate($value + deg);
          transform: rotate($value + deg);
}

// Translate
// Usage:
// .div {
//   @include translate(15px, 30px);
// }
@mixin translate($xValue, $yValue) {
  -webkit-transform: translate($xValue, $yValue);
     -moz-transform: translate($xValue, $yValue);
      -ms-transform: translate($xValue, $yValue);
          transform: translate($xValue, $yValue);
}

// Translate Rotate
// Usage:
// .div {
//   @include transform(translateX(-50%) translateY(-50%) rotate(-90deg));
// }
@mixin transform($value) {
  -webkit-transform: $value;
     -moz-transform: $value;
      -ms-transform: $value;
          transform: $value;
}

// Box Shadow
// Usage:
// .contact-wrapper {
//   @include box-shadow(10px 10px 5px #888888);
// }
@mixin box-shadow ($value) {
  -webkit-box-shadow: $value;
     -moz-box-shadow: $value;
      -ms-box-shadow: $value;
          box-shadow: $value;
}

// Set Placeholder Color
// Usage:
// .mcs-textbox {
//   @include set-placeholder-color($black);
// }
@mixin set-placeholder-color ($value) {
  &::-webkit-input-placeholder {
    color: $value;
  }

  &::-moz-placeholder {
    color: $value;
    opacity: 1;
  }

  &:-ms-input-placeholder {
    color: $value;
  }
}

// Set display flex with direction
// Usage:
// .mcs-container {
//   @include display-flex(row);
// }
@mixin display-flex ($direction) {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;

  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Set display inline-flex with direction
// Usage:
// .mcs-container {
//   @include display-inline-flex(row);
// }
@mixin display-inline-flex ($direction) {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: inline-flex;

  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Flex item
// Usage:
// .mcs-flex-item {
//   @include flex(1 1 auto);
// }
@mixin flex ($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

// Flex item order
// Usage:
// .mcs-flex-item {
//   @include flex-order(1);
// }
@mixin flex-order ($value) {
  -webkit-box-ordinal-group: $value;
  -moz-box-ordinal-group: $value;
  -ms-flex-order: $value;
  -webkit-order: $value;
  order: $value;
}

// Flex wrap
// Usage:
// .mcs-flex-item {
//   @include flex-wrap(nowrap);
// }
@mixin flex-wrap ($wrap) {
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

// Flex Align-items
// Usage:
// .mcs-flex-item {
//   @include align-items(center);
// }
@mixin align-items ($value) {
  -webkit-align-items: $value;
  align-items: $value;
}

// Flex Align-self
// Usage:
// .mcs-flex-self {
//   @include align-self(center);
// }
@mixin align-self ($value) {
  -moz-align-self: $value;
  -webkit-align-self: $value;
  align-self: $value;
}

// Flex Justify-self
// Usage:
// .mcs-flex-self {
//   @include justify-self(center);
// }
@mixin justify-self ($value) {
  -moz-justify-self: $value;
  -webkit-justify-self: $value;
  justify-self: $value;
}

// Textbox Highlight
// Usage:
// .mcs-textbox {
//   @include textbox-highlight(none);
// }
@mixin textbox-highlight($value) {
  -webkit-touch-callout: $value;
  -webkit-user-select: $value;
  -khtml-user-select: $value;
  -moz-user-select: $value;
  -ms-user-select: $value;
  user-select: $value;
}

// Set interval to all child(items) vertical or horizontal
// and eliminate all of the hidden elements
// Usage:
// .mcs-textbox {
//   @include set-items-interval(20);
// }
@mixin set-items-interval($value, $orientation: vertical) {
  $interval-breakpoints: (
    horizontal: left,
    vertical: top
  ) !default;
  $interval-margin-position: map-get($interval-breakpoints, $orientation);

  > * {
    &:not(:first-child) {
      margin-#{$interval-margin-position}: $value;
    }

    @each $screen-breakpoint-key in map-keys($screen-breakpoints) {
      $screen-breakpoint-value: map-get($screen-breakpoints, $screen-breakpoint-key);
      &[hidden-#{$screen-breakpoint-key}] {
        + * {
          margin-#{$interval-margin-position}: 0;
        }
      }
    }

    &[style*="display: none;"],
    &[class*="hide-element"] {
      + * {
        margin-#{$interval-margin-position}: 0;
      }
    }
  }
}

// Set padding on every children
// Usage:
// .mcs-textbox {
//   @include set-items-padding(20px);
// }
@mixin set-items-padding($value, $orientation: vertical) {
  @if $orientation == vertical {
    > * {
      &:not(:first-child) {
        padding-top: $value;
      }
    }
  } @else {
    > * {
      &:not(:first-child) {
        padding-left: $value;
      }
    }
  }
}

// Set items divider
// Usage:
// .mcs-textbox {
//   @include set-items-divider(default, vertical);
// }
@mixin set-items-divider($color: default, $orientation: vertical) {
  $actual-color: if($color == default, $divider-light-color, $color);
  $actual-border-style: 1px solid $actual-color;

  @if $orientation == vertical {
    > * {
      &:not(:first-child) {
        border-top: $actual-border-style;
      }
    }
  } @else {
    > * {
      &:not(:first-child) {
        border-left: $actual-border-style;
      }
    }
  }
}

// Transition
// Usage:
// .mcs-textbox {
//   @include transition(.4s linear);
// }
@mixin transition($transition...) {
  @if length($transition) == 0 {
    -webkit-transition: $transition-base;
    -moz-transition: $transition-base;
    -ms-transition: $transition-base;
    -o-transition: $transition-base;
    transition: $transition-base;
  } @else {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
  }
}

// Animation
// Usage:
// .mcs-textbox {
//   @include animation(Name .4s linear);
// }
@mixin animation($animation) {
  -webkit-animation: $animation;
  -moz-animation: $animation;
  -ms-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}

// Set background-opacrity
// Usage:
// .mcs-alert {
//   @include background-opacity(#000, 0.5);
// }
@mixin background-opacity($color, $opacity) {
  background: rgba($color, $opacity);
}

// Set column-count
// Usage:
// .mcs-alert {
//   @include column-count(3);
// }
@mixin column-count($value) {
  -webkit-column-count: $value;
  -moz-column-count: $value;
  column-count: $value;
}

// Set cursor to grab hand
// Usage:
// .mcs-slider {
//   @include cursor-grab;
// }
@mixin cursor-grab {
  cursor: -webkit-grab;
  cursor: -moz-grab;
  cursor: grab;
}

// Set cursor to grabbing hand
// Usage:
// .mcs-slider {
//   @include cursor-grabbing;
// }
@mixin cursor-grabbing {
  cursor: -webkit-grabbing;
  cursor: -moz-grabbing;
  cursor: grabbing;
}

// Sets all the heading size based on scale by default the size is 8
// Usage:
// .mcs-slider {
//   @include set-headings-size(2.5);
// }
@mixin set-headings-size($scale: 1, $base-size: $font-size-default) {
  $base-large-size: $base-size;
  $base-medium-size: $base-size - 1;
  $base-small-size: $base-size - 1;

  @for $index from 1 through 6 {
    h#{$index} {
      @content;
      @include font-size($base-large-size + ($scale * (6 - $index)));
      @include breakpoint(medium) {
        @include font-size($base-medium-size + ($scale * (6 - $index)));
      }
      @include breakpoint(small) {
        @include font-size($base-small-size + ($scale * (6 - $index)));
      }
    }
  }
}

// Sets the backface-visibility
// Usage:
// .mcs-slider {
//   @include backface-visibility(hidden);
// }
@mixin backface-visibility($value) {
  -webkit-backface-visibility: $value;
  backface-visibility: $value;
}

// Sets the column count for ul
// Usage:
// ul {
//   @include column-count(2);
// }
@mixin column-count($value) {
  column-count: $value;
  -webkit-column-count: $value;
  -moz-column-count: $value;
}

// Sets the break behavior of an element
// Usage:
// li {
//   @include break(avoid);
// }
@mixin break($value) {
  -webkit-column-break-inside: $value;
  page-break-inside: $value;
  break-inside: $value;
}